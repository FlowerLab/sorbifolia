// Code generated by bunpgd/ub. DO NOT EDIT.
// versions: bun 1.2.3
// source: bunpgd/ub/gen_bun.go

package ub

import (
	"github.com/uptrace/bun"
	"github.com/uptrace/bun/schema"
)

type (
	Select struct {
		util *U
		tx   *bun.SelectQuery
	}
	Update struct {
		util *U
		tx   *bun.UpdateQuery
	}
	Insert struct {
		util *U
		tx   *bun.InsertQuery
	}
	Delete struct {
		util *U
		tx   *bun.DeleteQuery
	}
)

func (u *U) Select() *Select { return &Select{util: u, tx: u.NewSelect()} }
func (u *U) Update() *Update { return &Update{util: u, tx: u.NewUpdate()} }
func (u *U) Insert() *Insert { return &Insert{util: u, tx: u.NewInsert()} }
func (u *U) Delete() *Delete { return &Delete{util: u, tx: u.NewDelete()} }

func (x *Select) RawQ() *bun.SelectQuery { return x.tx }
func (x *Update) RawQ() *bun.UpdateQuery { return x.tx }
func (x *Insert) RawQ() *bun.InsertQuery { return x.tx }
func (x *Delete) RawQ() *bun.DeleteQuery { return x.tx }

func (x *Select) WhereAllWithDeleted() *Select            { x.tx.WhereAllWithDeleted(); return x }
func (x *Select) For(s string, args ...any) *Select       { x.tx.For(s, args...); return x }
func (x *Select) IntersectAll(q *bun.SelectQuery) *Select { x.tx.IntersectAll(q); return x }
func (x *Select) ModelTableExpr(s string, args ...any) *Select {
	x.tx.ModelTableExpr(s, args...)
	return x
}
func (x *Select) OrderExpr(s string, args ...any) *Select { x.tx.OrderExpr(s, args...); return x }
func (x *Select) Relation(s string, fn ...func(*bun.SelectQuery) *bun.SelectQuery) *Select {
	x.tx.Relation(s, fn...)
	return x
}
func (x *Select) Union(q *bun.SelectQuery) *Select         { x.tx.Union(q); return x }
func (x *Select) TableExpr(s string, args ...any) *Select  { x.tx.TableExpr(s, args...); return x }
func (x *Select) Column(args ...string) *Select            { x.tx.Column(args...); return x }
func (x *Select) ColumnExpr(s string, args ...any) *Select { x.tx.ColumnExpr(s, args...); return x }
func (x *Select) GroupExpr(s string, args ...any) *Select  { x.tx.GroupExpr(s, args...); return x }
func (x *Select) IgnoreIndexForJoin(args ...string) *Select {
	x.tx.IgnoreIndexForJoin(args...)
	return x
}
func (x *Select) Limit(n int) *Select               { x.tx.Limit(n); return x }
func (x *Select) Conn(db bun.IConn) *Select         { x.tx.Conn(db); return x }
func (x *Select) ForceIndex(args ...string) *Select { x.tx.ForceIndex(args...); return x }
func (x *Select) ForceIndexForOrderBy(args ...string) *Select {
	x.tx.ForceIndexForOrderBy(args...)
	return x
}
func (x *Select) Group(args ...string) *Select       { x.tx.Group(args...); return x }
func (x *Select) Join(s string, args ...any) *Select { x.tx.Join(s, args...); return x }
func (x *Select) Distinct() *Select                  { x.tx.Distinct(); return x }
func (x *Select) ForceIndexForGroupBy(args ...string) *Select {
	x.tx.ForceIndexForGroupBy(args...)
	return x
}
func (x *Select) JoinOn(s string, args ...any) *Select { x.tx.JoinOn(s, args...); return x }
func (x *Select) UseIndexForGroupBy(args ...string) *Select {
	x.tx.UseIndexForGroupBy(args...)
	return x
}
func (x *Select) WithRecursive(name string, query schema.QueryAppender) *Select {
	x.tx.WithRecursive(name, query)
	return x
}
func (x *Select) Table(args ...string) *Select             { x.tx.Table(args...); return x }
func (x *Select) UnionAll(q *bun.SelectQuery) *Select      { x.tx.UnionAll(q); return x }
func (x *Select) DistinctOn(s string, args ...any) *Select { x.tx.DistinctOn(s, args...); return x }
func (x *Select) ExceptAll(q *bun.SelectQuery) *Select     { x.tx.ExceptAll(q); return x }
func (x *Select) ForceIndexForJoin(args ...string) *Select { x.tx.ForceIndexForJoin(args...); return x }
func (x *Select) Intersect(q *bun.SelectQuery) *Select     { x.tx.Intersect(q); return x }
func (x *Select) Offset(n int) *Select                     { x.tx.Offset(n); return x }
func (x *Select) Order(args ...string) *Select             { x.tx.Order(args...); return x }
func (x *Select) JoinOnOr(s string, args ...any) *Select   { x.tx.JoinOnOr(s, args...); return x }
func (x *Select) Model(model any) *Select                  { x.tx.Model(model); return x }
func (x *Select) UseIndexForOrderBy(args ...string) *Select {
	x.tx.UseIndexForOrderBy(args...)
	return x
}
func (x *Select) WhereOr(s string, args ...any) *Select { x.tx.WhereOr(s, args...); return x }
func (x *Select) WherePK(args ...string) *Select        { x.tx.WherePK(args...); return x }
func (x *Select) With(name string, query schema.QueryAppender) *Select {
	x.tx.With(name, query)
	return x
}
func (x *Select) IgnoreIndexForOrderBy(args ...string) *Select {
	x.tx.IgnoreIndexForOrderBy(args...)
	return x
}
func (x *Select) UseIndexForJoin(args ...string) *Select                   { x.tx.UseIndexForJoin(args...); return x }
func (x *Select) Apply(fn func(*bun.SelectQuery) *bun.SelectQuery) *Select { x.tx.Apply(fn); return x }
func (x *Select) ApplyQueryBuilder(fn func(bun.QueryBuilder) bun.QueryBuilder) *Select {
	x.tx.ApplyQueryBuilder(fn)
	return x
}
func (x *Select) Err(err error) *Select                { x.tx.Err(err); return x }
func (x *Select) ExcludeColumn(args ...string) *Select { x.tx.ExcludeColumn(args...); return x }
func (x *Select) IgnoreIndex(args ...string) *Select   { x.tx.IgnoreIndex(args...); return x }
func (x *Select) IgnoreIndexForGroupBy(args ...string) *Select {
	x.tx.IgnoreIndexForGroupBy(args...)
	return x
}
func (x *Select) Where(s string, args ...any) *Select { x.tx.Where(s, args...); return x }
func (x *Select) WhereDeleted() *Select               { x.tx.WhereDeleted(); return x }
func (x *Select) WhereGroup(s string, fn func(*bun.SelectQuery) *bun.SelectQuery) *Select {
	x.tx.WhereGroup(s, fn)
	return x
}
func (x *Select) Except(q *bun.SelectQuery) *Select    { x.tx.Except(q); return x }
func (x *Select) Having(s string, args ...any) *Select { x.tx.Having(s, args...); return x }
func (x *Select) UseIndex(args ...string) *Select      { x.tx.UseIndex(args...); return x }

func (x *Insert) Err(err error) *Insert { x.tx.Err(err); return x }
func (x *Insert) ModelTableExpr(s string, args ...any) *Insert {
	x.tx.ModelTableExpr(s, args...)
	return x
}
func (x *Insert) On(s string, args ...any) *Insert        { x.tx.On(s, args...); return x }
func (x *Insert) WhereOr(s string, args ...any) *Insert   { x.tx.WhereOr(s, args...); return x }
func (x *Insert) Conn(db bun.IConn) *Insert               { x.tx.Conn(db); return x }
func (x *Insert) ExcludeColumn(args ...string) *Insert    { x.tx.ExcludeColumn(args...); return x }
func (x *Insert) Returning(s string, args ...any) *Insert { x.tx.Returning(s, args...); return x }
func (x *Insert) Where(s string, args ...any) *Insert     { x.tx.Where(s, args...); return x }
func (x *Insert) Column(args ...string) *Insert           { x.tx.Column(args...); return x }
func (x *Insert) Set(s string, args ...any) *Insert       { x.tx.Set(s, args...); return x }
func (x *Insert) Value(column string, query string, args ...any) *Insert {
	x.tx.Value(column, query, args...)
	return x
}
func (x *Insert) WithRecursive(name string, query schema.QueryAppender) *Insert {
	x.tx.WithRecursive(name, query)
	return x
}
func (x *Insert) Apply(fn func(*bun.InsertQuery) *bun.InsertQuery) *Insert { x.tx.Apply(fn); return x }
func (x *Insert) ColumnExpr(s string, args ...any) *Insert                 { x.tx.ColumnExpr(s, args...); return x }
func (x *Insert) Ignore() *Insert                                          { x.tx.Ignore(); return x }
func (x *Insert) Model(model any) *Insert                                  { x.tx.Model(model); return x }
func (x *Insert) Replace() *Insert                                         { x.tx.Replace(); return x }
func (x *Insert) Table(args ...string) *Insert                             { x.tx.Table(args...); return x }
func (x *Insert) TableExpr(s string, args ...any) *Insert                  { x.tx.TableExpr(s, args...); return x }
func (x *Insert) With(name string, query schema.QueryAppender) *Insert {
	x.tx.With(name, query)
	return x
}

func (x *Update) Value(column string, query string, args ...any) *Update {
	x.tx.Value(column, query, args...)
	return x
}
func (x *Update) WherePK(args ...string) *Update          { x.tx.WherePK(args...); return x }
func (x *Update) IgnoreIndex(args ...string) *Update      { x.tx.IgnoreIndex(args...); return x }
func (x *Update) WhereDeleted() *Update                   { x.tx.WhereDeleted(); return x }
func (x *Update) JoinOnOr(s string, args ...any) *Update  { x.tx.JoinOnOr(s, args...); return x }
func (x *Update) Err(err error) *Update                   { x.tx.Err(err); return x }
func (x *Update) OmitZero() *Update                       { x.tx.OmitZero(); return x }
func (x *Update) Returning(s string, args ...any) *Update { x.tx.Returning(s, args...); return x }
func (x *Update) SetColumn(column string, query string, args ...any) *Update {
	x.tx.SetColumn(column, query, args...)
	return x
}
func (x *Update) WhereOr(s string, args ...any) *Update { x.tx.WhereOr(s, args...); return x }
func (x *Update) ApplyQueryBuilder(fn func(bun.QueryBuilder) bun.QueryBuilder) *Update {
	x.tx.ApplyQueryBuilder(fn)
	return x
}
func (x *Update) ForceIndex(args ...string) *Update       { x.tx.ForceIndex(args...); return x }
func (x *Update) Model(model any) *Update                 { x.tx.Model(model); return x }
func (x *Update) Set(s string, args ...any) *Update       { x.tx.Set(s, args...); return x }
func (x *Update) ExcludeColumn(args ...string) *Update    { x.tx.ExcludeColumn(args...); return x }
func (x *Update) TableExpr(s string, args ...any) *Update { x.tx.TableExpr(s, args...); return x }
func (x *Update) WhereAllWithDeleted() *Update            { x.tx.WhereAllWithDeleted(); return x }
func (x *Update) Column(args ...string) *Update           { x.tx.Column(args...); return x }
func (x *Update) Table(args ...string) *Update            { x.tx.Table(args...); return x }
func (x *Update) WithRecursive(name string, query schema.QueryAppender) *Update {
	x.tx.WithRecursive(name, query)
	return x
}
func (x *Update) Apply(fn func(*bun.UpdateQuery) *bun.UpdateQuery) *Update { x.tx.Apply(fn); return x }
func (x *Update) Join(s string, args ...any) *Update                       { x.tx.Join(s, args...); return x }
func (x *Update) UseIndex(args ...string) *Update                          { x.tx.UseIndex(args...); return x }
func (x *Update) With(name string, query schema.QueryAppender) *Update {
	x.tx.With(name, query)
	return x
}
func (x *Update) Conn(db bun.IConn) *Update            { x.tx.Conn(db); return x }
func (x *Update) JoinOn(s string, args ...any) *Update { x.tx.JoinOn(s, args...); return x }
func (x *Update) ModelTableExpr(s string, args ...any) *Update {
	x.tx.ModelTableExpr(s, args...)
	return x
}
func (x *Update) Where(s string, args ...any) *Update { x.tx.Where(s, args...); return x }
func (x *Update) WhereGroup(s string, fn func(*bun.UpdateQuery) *bun.UpdateQuery) *Update {
	x.tx.WhereGroup(s, fn)
	return x
}
func (x *Update) Bulk() *Update { x.tx.Bulk(); return x }

func (x *Delete) Err(err error) *Delete                                    { x.tx.Err(err); return x }
func (x *Delete) Where(s string, args ...any) *Delete                      { x.tx.Where(s, args...); return x }
func (x *Delete) WhereDeleted() *Delete                                    { x.tx.WhereDeleted(); return x }
func (x *Delete) Apply(fn func(*bun.DeleteQuery) *bun.DeleteQuery) *Delete { x.tx.Apply(fn); return x }
func (x *Delete) ApplyQueryBuilder(fn func(bun.QueryBuilder) bun.QueryBuilder) *Delete {
	x.tx.ApplyQueryBuilder(fn)
	return x
}
func (x *Delete) ModelTableExpr(s string, args ...any) *Delete {
	x.tx.ModelTableExpr(s, args...)
	return x
}
func (x *Delete) Returning(s string, args ...any) *Delete { x.tx.Returning(s, args...); return x }
func (x *Delete) WhereAllWithDeleted() *Delete            { x.tx.WhereAllWithDeleted(); return x }
func (x *Delete) WherePK(args ...string) *Delete          { x.tx.WherePK(args...); return x }
func (x *Delete) With(name string, query schema.QueryAppender) *Delete {
	x.tx.With(name, query)
	return x
}
func (x *Delete) WithRecursive(name string, query schema.QueryAppender) *Delete {
	x.tx.WithRecursive(name, query)
	return x
}
func (x *Delete) Conn(db bun.IConn) *Delete               { x.tx.Conn(db); return x }
func (x *Delete) Model(model any) *Delete                 { x.tx.Model(model); return x }
func (x *Delete) Table(args ...string) *Delete            { x.tx.Table(args...); return x }
func (x *Delete) TableExpr(s string, args ...any) *Delete { x.tx.TableExpr(s, args...); return x }
func (x *Delete) WhereGroup(s string, fn func(*bun.DeleteQuery) *bun.DeleteQuery) *Delete {
	x.tx.WhereGroup(s, fn)
	return x
}
func (x *Delete) WhereOr(s string, args ...any) *Delete { x.tx.WhereOr(s, args...); return x }
func (x *Delete) ForceDelete() *Delete                  { x.tx.ForceDelete(); return x }
